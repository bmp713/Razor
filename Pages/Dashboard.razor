@page "/dashboard"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Frontend.Services.UserState UserState
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json.Nodes
@using System.Net.Http.Json
@using Frontend.Models

@if (!UserState.IsLoggedIn){
    <div class="alert alert-warning">
        You are not logged in. Please <a href="/login">login</a> to view your dashboard.
    </div>
}
else{
    <div class="mx-0 my-1">
        <div class="row update justify-content-center align-items-stretch m-0">
            <div class="col-lg-6 col-12 text-left order-1 p-0">
                <h2>@($"{UserState.CurrentUser.firstName} {UserState.CurrentUser.lastName}")</h2>
                <p>@UserState.CurrentUser.email</p>            
                
                <EditForm class="form" Model="updateModel" OnValidSubmit="HandleUpdate">
                    <h5>Update</h5>
                    <InputText @bind-Value="updateModel.FirstName" placeholder="First Name" /><br>
                    <InputText @bind-Value="updateModel.LastName" placeholder="Last Name" /><br>
                    <InputText @bind-Value="updateModel.Password" placeholder="Password"/><br>
                    <button type="submit" class="btn btn-primary">Update</button>
                    <button type="button" class="btn btn-primary bg-red" @onclick="HandleDelete">Delete</button>
                </EditForm>
            </div>
            <div class="col-lg-6 col-12 text-left order-2 p-0">
                <div class="list-group mt-xl-0 mt-xl-0 mt-3">
                    <h2>All Users</h2>
                    @if (users.Count > 0){
                        @foreach (var user in users){
                            <div class="list-group-item">
                                <div class="d-flex flex-column flex-xl-row justify-content-xl-between align-items-start p-2">
                                    <div class="user-info">
                                        <strong>@($"{user.firstName} {user.lastName}")</strong>
                                        <br />
                                        <small>@user.email</small>
                                    </div>
                                    <small class="text-muted pt-2">ID: @user.id</small>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div><br>
        <div class="row messages justify-content-start align-items-stretch g-4">
            @if (messages != null && messages.Count > 0){ 
                @foreach (var message in messages.Take(numMessages)){
                    <div class="d-flex col-xl-3 col-12 mb-0">
                        <div class="update ">
                            <a target="_blank" href="@message["imageURL"]?.ToString()" 
                                style="text-decoration: none; color: black;">
                                <img
                                    width="10%" class="mb-3"
                                    src="@message["userImg"]?.ToString()"
                                />
                                <strong>@message["first"]?.ToString() @message["last"]?.ToString()</strong>
                                <span class="mt-2 text-gray">@message["time"]?.ToString()</span>
                                <img
                                    width="100%" class="mb-1"
                                    src="@message["imageURL"]?.ToString()"
                                />
                                <p class="mt-2">@message["message"]?.ToString()</p>
                            </a>
                        </div>
                    </div>
                }
            }
            <div class="col-12 text-left my-3 mx-0">

                @if (messages != null && numMessages < messages.Count) {
                    <button style="background: none; color: #888;" class="btn btn-primary" @onclick="ShowMoreMessages">
                        Show More
                    </button>
                }
                <button style="color:#888; border:none !important; background:none" class="btn btn-primary" @onclick="ToggleDark">
                    @(isDark ? "Light" : "Dark") Theme
                </button>
            </div>
            
        </div>

    </div>
}

@code {
    // Define the model for the update form
    private List<User> users = new List<User>();
    private UpdateFormModel updateModel = new UpdateFormModel();
    private int numMessages = 4;
    public JsonArray messages;

    private bool isDark = false;
    [Inject] IJSRuntime JS { get; set; } = default!;

    private async Task ToggleDark(){
        isDark = await JS.InvokeAsync<bool>("toggleDarkClass");
    }

    protected override async Task OnInitializedAsync(){
        // Initialize user state if not already done
        if (UserState.CurrentUser == null){
            await UserState.Initialize();
        }

        // Only fetch users if logged in
        if (UserState.IsLoggedIn){
            users = await Http.GetFromJsonAsync<List<User>>("https://razor-backend.up.railway.app/users");
            //users = await Http.GetFromJsonAsync<List<User>>("http://localhost:5127/users");
            
            // Initialize update model with current user data
            updateModel.FirstName = UserState.CurrentUser.firstName;
            updateModel.LastName = UserState.CurrentUser.lastName;
            updateModel.Email = UserState.CurrentUser.email;
            updateModel.Password = UserState.CurrentUser.password;
        }
        else{
            // Redirect to login if not logged in
            NavigationManager.NavigateTo("/login");
        }
    
        Console.WriteLine("Dashboard initialized");

        var json = await Http.GetStringAsync("https://react-social-backend.up.railway.app/messages/read");
        messages = JsonNode.Parse(json).AsArray();
        
        foreach (var message in messages){
            foreach (var prop in message.AsObject()){
                Console.WriteLine($"{prop.Key}: {prop.Value}");
            }
        }
    }    
    
    // Handle the form async for API
    private async Task HandleUpdate(){
        if (UserState.CurrentUser != null){
            // Update the user data with the form values
            var updatedUser = new User{
                id = UserState.CurrentUser.id,
                firstName = updateModel.FirstName,
                lastName = updateModel.LastName,
                email = updateModel.Email,
                password = updateModel.Password
            };
            
            // Send PUT request to update user in backend
            var response = await Http.PutAsJsonAsync($"https://razor-backend.up.railway.app/users/{updatedUser.id}", updatedUser);
            //var response = await Http.PutAsJsonAsync($"http://localhost:5127/users/{updatedUser.id}", updatedUser);
            
            if (response.IsSuccessStatusCode){

                // Get the updated user from backend
                var refreshedUser = await Http.GetFromJsonAsync<User>($"https://razor-backend.up.railway.app/{updatedUser.id}");
                //var refreshedUser = await Http.GetFromJsonAsync<User>($"http://localhost:5127/users/{updatedUser.id}");

                UserState.CurrentUser = refreshedUser;

                // Update the users list
                users = await Http.GetFromJsonAsync<List<User>>("https://razor-backend.up.railway.app/users");
                //users = await Http.GetFromJsonAsync<List<User>>("http://localhost:5127/users");
            }
            else{
                Console.WriteLine($"Failed to update user: {await response.Content.ReadAsStringAsync()}");
            }
        }
    }
  
  // Handle delete
    private async Task HandleDelete(){
        if (UserState.CurrentUser != null){
            // Call API to delete user
            var response = await Http.DeleteAsync($"https://razor-backend.up.railway.app/users/{UserState.CurrentUser.id}");
            //var response = await Http.DeleteAsync($"http://localhost:5127/users/{UserState.CurrentUser.id}");

            if (response.IsSuccessStatusCode){
                // Clear UserState and redirect to login
                await UserState.Logout();
                NavigationManager.NavigateTo("/login");
            }
            else{
                // Handle error (e.g., show message)
                Console.WriteLine("Failed to delete user");
            }
        }
    }

    private async Task ShowMoreMessages(){
        if (messages != null && numMessages < messages.Count){
            numMessages = Math.Min(numMessages + 4, messages.Count);
        }
    }

    public class UpdateFormModel{
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
        public string? Password { get; set; }   
    }
}