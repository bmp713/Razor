@using Frontend.Services
@inject UserState UserState
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">    <div class="container-fluid">
        <a class="navbar-brand" href="@(UserState.IsLoggedIn ? "dashboard" : "login")">Home</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (!UserState.IsLoggedIn){
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login" Match="NavLinkMatch.All">
                    <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="signup">
                    <span class="bi bi-person-plus" aria-hidden="true"></span> Signup
                </NavLink>
            </div>
        }
        else{
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="dashboard">
                    <span class="bi bi-speedometer2" aria-hidden="true"></span> Dashboard
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <a href="javascript:void(0)" class="nav-link" @onclick="HandleLogout">
                    <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                </a>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu(){
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async Task OnInitializedAsync(){
        if (UserState.CurrentUser == null){
            await UserState.Initialize();
        }
        UserState.OnChange += StateHasChanged;
    }
    public void Dispose(){
        UserState.OnChange -= StateHasChanged;
    }
    private async Task HandleLogout(){
        await UserState.Logout();
        NavigationManager.NavigateTo("/login", true);
    }
}
